package ${package}.web.controller.${module};


        import ${package}.model.pojo.entity.${module}.${className};
        import ${package}.model.pojo.vo.${module}.${className}VO;
        import ${package}.service.${module}.${className}Service;
        import ${package}.web.controller.CampusController;
        import com.legend.module.core.model.contant.arribute.Column;
        import com.legend.module.core.model.contant.arribute.Key;
        import com.legend.module.core.model.contant.code.result.AjaxCode;
        import com.legend.module.core.model.contant.message.result.AjaxMessage;
        import com.legend.module.core.model.group.option.AddGroup;
        import com.legend.module.core.model.group.option.UpdateGroup;
        import com.legend.module.core.model.json.result.Ajax;
        import com.legend.module.core.model.json.result.AjaxValidate;
        import com.legend.module.core.model.utils.PageUtils;
        import com.legend.module.core.model.utils.QueryUtils;
        import org.springframework.validation.BindingResult;
        import org.springframework.validation.annotation.Validated;
        import org.springframework.web.bind.annotation.*;

        import javax.annotation.Resource;
        import java.util.List;
        import java.util.stream.Collectors;

/**
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${module}/${subModule}")
public class ${className}Controller extends CampusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(${className}Controller.class);

    @Resource
    private ${className}Service ${classname}Service;

    /**
     * 根据${classname}VO中不为空的字段以及query中的分页条件进行条件查询
     *
     * @param ${classname}VO 查询条件
     * @param queryUtils 分页查询工具
     * @return Ajax.success() or Ajax.error()
     */
    @GetMapping("/list")
    // @RequiresPermissions("${module}:${subModule}:list")
    public Ajax list(${className}VO ${classname}VO, QueryUtils queryUtils) {
        try {
            List<${className}> ${classname}List = ${classname}Service.getList(${classname}VO.parseTo(),
                    queryUtils);
            List<${className}VO> ${classname}VOList = ${classname}List.stream().map((entity) ->
                    new ${className}VO().parseFrom(entity)).collect(Collectors.toList());
            PageUtils pageUtils = new PageUtils(${classname}VOList.size(), queryUtils.getCurrentPage(), queryUtils.getPageSize());
            LOGGER.info("list=>" + pageUtils);
            return Ajax.success(${classname}VOList, AjaxMessage.QUERY_SUCCESS).put(Key.PAGINATION, pageUtils);
        } catch (Exception e) {
            e.printStackTrace();
            return Ajax.error(AjaxMessage.SERVER_ERROR, AjaxCode.SERVER_ERROR);
        }
    }

    /**
     * 根据id查询指定的${classname}
     *
     * @param id id
     * @return Ajax.success() or Ajax.error()
     */
    @GetMapping("/details/{id}")
    // @RequiresPermissions("${module}:${subModule}:details")
    public Ajax details(@PathVariable int id) {
        try {
            ${className} ${classname} =${classname}Service.getById(id);
                ${className}VO ${classname}VO = new ${className}VO().parseFrom(${classname});
            LOGGER.info("details=>" + ${classname}VO);
            return Ajax.success(${classname}VO, AjaxMessage.QUERY_SUCCESS);
        } catch (Exception e) {
            e.printStackTrace();
            return Ajax.error(AjaxMessage.SERVER_ERROR, AjaxCode.SERVER_ERROR);
        }
    }

    /**
     * 需要通过后台验证，并个根据id添加
     *
     * @param ${classname}VO 添加的${classname}VO
     * @param bindingResult 后台验证结果
     * @return Ajax.success() or Ajax.error()
     */
    @PostMapping("/add")
    // @RequiresPermissions("${module}:${subModule}:add")
    public Ajax add(@Validated(AddGroup.class) ${className}VO ${classname}VO, BindingResult bindingResult) {
        try {
            if (bindingResult.hasErrors()) {
                return AjaxValidate.processBindingResult(bindingResult);
            }
            int saveResult = ${classname}Service.save(${classname}VO.parseTo(Column.ID));
            LOGGER.info("save=>" + (saveResult == 1))
            return saveResult == 1 ? Ajax.success(AjaxMessage.SAVE_SUCCESS) : Ajax.error(AjaxMessage.SAVE_FAILURE, AjaxCode
                    .SAVE_FAILURE);
        } catch (Exception e) {
            e.printStackTrace();
            return Ajax.error(AjaxMessage.SERVER_ERROR, AjaxCode.SERVER_ERROR);
        }
    }

    /**
     * 需要通过后台验证，并个根据id更新相应不为空的字段
     *
     * @param ${classname}VO 更新${classname}VO的字段信息
     * @param bindingResult 后台验证结果
     * @return Ajax.success() or Ajax.error()
     */
    @PutMapping("/update")
    // @RequiresPermissions("${module}:${subModule}:update")
    public Ajax update(@Validated(UpdateGroup.class) ${className}VO ${classname}VO, BindingResult bindingResult) {
        try {
            if (bindingResult.hasErrors()) {
                return AjaxValidate.processBindingResult(bindingResult);
            }
            int updateResult = ${classname}Service.updateById(${classname}VO.parseTo());
            LOGGER.info("update=>" + (updateResult == 1))
            return updateResult == 1 ? Ajax.success(AjaxMessage.UPDATE_SUCCESS) : Ajax.error(AjaxMessage.UPDATE_FAILURE, AjaxCode
                    .UPDATE_FAILURE);
        } catch (Exception e) {
            e.printStackTrace();
            return Ajax.error(AjaxMessage.SERVER_ERROR, AjaxCode.SERVER_ERROR);
        }
    }

    /**
     * 根据id逻辑删除
     *
     * @param id id
     * @return Ajax.success() or Ajax.error()
     */
    @DeleteMapping("/delete/{id}")
    // @RequiresPermissions("${module}:${subModule}:delete")
    public Ajax delete(@PathVariable Integer id) {
        try {
            int deletedResult = ${classname}Service.updateDeleted(id);
            return deletedResult == 1 ? Ajax.success(AjaxMessage.DELETE_SUCCESS) : Ajax.error(AjaxMessage.DELETE_FAILURE,
                    AjaxCode.DELETE_FAILURE);
        } catch (Exception e) {
            e.printStackTrace();
            return Ajax.error(AjaxMessage.SERVER_ERROR, AjaxCode.SERVER_ERROR);
        }
    }

}
