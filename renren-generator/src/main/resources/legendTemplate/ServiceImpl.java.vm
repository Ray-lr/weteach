package ${package}.service.${module}.impl;

import ${package}.dao.mapper.${module}.${className}Mapper;
import ${package}.model.pojo.entity.${module}.${className};
import ${package}.model.pojo.entity.${module}.example.${className}Example;
import ${package}.service.${module}.${className}Service;
import com.legend.module.core.service.core.impl.AbstractLegendService;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.common.Mapper;

import javax.annotation.Resource;

/**
 * @author ${author}
 * @date ${datetime}
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class ${className}ServiceImpl extends AbstractLegendService<${className}> implements ${className}Service {

    @Resource
    private ${className}Mapper ${classname}Mapper;

    @Override
    public Mapper<${className}> getMapper() {
        return ${classname}Mapper;
    }

    @Override
    protected Object getExample(${className} ${classname}, String order, String sort) {
            ${className}Example example = new ${className}Example();
        if (StringUtils.isNotBlank(order)) {
            if (StringUtils.isNotBlank(sort)) {
                order = order.concat(" ").concat(sort);
            }
            example.setOrderByClause(order);
        }
            ${className}Example.Criteria criteria = example.createCriteria().andIsDeletedEqualTo(false);
        if (${classname} ==null){
            return example;
        }

        #foreach ($column in $columns)
            if (${classname}.get${column.attrName}() != null){
            criteria.and${column.attrName}EqualTo(${classname}.get${column.attrName}());
        }
        #end
        return example;
    }

}
